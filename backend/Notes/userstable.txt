Структура и архитектура таблиц, связанных с пользователями, зависят от требований вашего приложения. Однако, существуют общие рекомендации и паттерны для создания таблиц пользователей и связанных с ними данных. Давайте обсудим некоторые основные аспекты, которые могут быть полезны при проектировании базы данных для пользователей.
Основная таблица users

Основная таблица users будет содержать базовую информацию о пользователях. Она может включать следующие поля:

sql

CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,          -- Уникальный идентификатор пользователя
    username VARCHAR(50) NOT NULL UNIQUE,       -- Имя пользователя (логин), уникальное для каждого пользователя
    email VARCHAR(100) NOT NULL UNIQUE,         -- Электронная почта, уникальная для каждого пользователя
    password_hash VARCHAR(255) NOT NULL,        -- Хеш пароля для безопасного хранения
    first_name VARCHAR(50),                     -- Имя пользователя
    last_name VARCHAR(50),                      -- Фамилия пользователя
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  -- Дата и время создания записи
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, -- Дата и время обновления записи
    is_active BOOLEAN DEFAULT TRUE,             -- Флаг активности учетной записи
    is_admin BOOLEAN DEFAULT FALSE              -- Флаг, указывающий, является ли пользователь администратором
);

Таблица для хранения профилей пользователей

Если вам нужно хранить дополнительную информацию о пользователях, которую не следует хранить в основной таблице, можно создать таблицу user_profiles:

sql

CREATE TABLE user_profiles (
    user_id INT PRIMARY KEY,                        -- Ссылка на таблицу users (идентификатор пользователя)
    bio TEXT,                                       -- Биография пользователя
    avatar_url VARCHAR(255),                        -- Ссылка на аватар пользователя
    website_url VARCHAR(255),                       -- Ссылка на личный сайт пользователя
    date_of_birth DATE,                             -- Дата рождения пользователя
    phone_number VARCHAR(20),                       -- Номер телефона пользователя
    FOREIGN KEY (user_id) REFERENCES users(id)      -- Внешний ключ на таблицу users
);

Таблица для хранения ролей и прав пользователей

Если ваш проект предполагает наличие различных ролей и прав доступа, можно создать таблицу roles и таблицу связи между пользователями и ролями user_roles:

sql

CREATE TABLE roles (
    id INT AUTO_INCREMENT PRIMARY KEY,        -- Уникальный идентификатор роли
    role_name VARCHAR(50) NOT NULL UNIQUE     -- Название роли (например, 'admin', 'user', 'editor')
);

CREATE TABLE user_roles (
    user_id INT,                              -- Ссылка на таблицу users
    role_id INT,                              -- Ссылка на таблицу roles
    PRIMARY KEY (user_id, role_id),           -- Композитный первичный ключ
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE CASCADE
);

Таблица для хранения токенов аутентификации

Для работы с JWT или другими методами аутентификации может понадобиться таблица для хранения токенов:

sql

CREATE TABLE user_tokens (
    id INT AUTO_INCREMENT PRIMARY KEY,          -- Уникальный идентификатор токена
    user_id INT,                                -- Ссылка на таблицу users
    token VARCHAR(255) NOT NULL,                -- Токен (например, JWT)
    expires_at TIMESTAMP,                       -- Время истечения токена
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  -- Дата и время создания токена
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

Таблица для хранения активности пользователей

Если нужно отслеживать действия пользователей, можно создать таблицу user_activity:

sql

CREATE TABLE user_activity (
    id INT AUTO_INCREMENT PRIMARY KEY,           -- Уникальный идентификатор записи
    user_id INT,                                 -- Ссылка на таблицу users
    activity_type VARCHAR(50),                   -- Тип действия (например, 'login', 'logout', 'password_change')
    activity_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  -- Время выполнения действия
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

Общая структура и архитектура

    Таблица users — основная таблица, содержащая базовую информацию о пользователях.
    Таблица user_profiles — дополнительная информация о пользователях.
    Таблица roles и user_roles — управление ролями и правами доступа.
    Таблица user_tokens — хранение токенов аутентификации.
    Таблица user_activity — журнал активности пользователей.

Заключение

Эта структура позволяет гибко управлять данными о пользователях, поддерживает расширяемость и безопасность. Она охватывает основные аспекты работы с пользователями: от базовой регистрации до управления ролями и отслеживания активности. В зависимости от специфики вашего проекта, вы можете добавлять или изменять таблицы и поля для лучшего соответствия требованиям.